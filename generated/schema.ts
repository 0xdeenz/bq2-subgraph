// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class MerkleTree extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MerkleTree entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MerkleTree must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MerkleTree", id.toString(), this);
    }
  }

  static load(id: string): MerkleTree | null {
    return changetype<MerkleTree | null>(store.get("MerkleTree", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get depth(): BigInt {
    let value = this.get("depth");
    return value!.toBigInt();
  }

  set depth(value: BigInt) {
    this.set("depth", Value.fromBigInt(value));
  }

  get root(): BigInt | null {
    let value = this.get("root");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set root(value: BigInt | null) {
    if (!value) {
      this.unset("root");
    } else {
      this.set("root", Value.fromBigInt(<BigInt>value));
    }
  }

  get numberOfLeaves(): i32 {
    let value = this.get("numberOfLeaves");
    return value!.toI32();
  }

  set numberOfLeaves(value: i32) {
    this.set("numberOfLeaves", Value.fromI32(value));
  }

  get group(): string {
    let value = this.get("group");
    return value!.toString();
  }

  set group(value: string) {
    this.set("group", Value.fromString(value));
  }
}

export class Group extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Group entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Group must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Group", id.toString(), this);
    }
  }

  static load(id: string): Group | null {
    return changetype<Group | null>(store.get("Group", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get merkleTree(): string {
    let value = this.get("merkleTree");
    return value!.toString();
  }

  set merkleTree(value: string) {
    this.set("merkleTree", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get admin(): Bytes | null {
    let value = this.get("admin");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set admin(value: Bytes | null) {
    if (!value) {
      this.unset("admin");
    } else {
      this.set("admin", Value.fromBytes(<Bytes>value));
    }
  }

  get members(): Array<string> | null {
    let value = this.get("members");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }
}

export class Member extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Member entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Member must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Member", id.toString(), this);
    }
  }

  static load(id: string): Member | null {
    return changetype<Member | null>(store.get("Member", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get identityCommitment(): BigInt {
    let value = this.get("identityCommitment");
    return value!.toBigInt();
  }

  set identityCommitment(value: BigInt) {
    this.set("identityCommitment", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get index(): i32 {
    let value = this.get("index");
    return value!.toI32();
  }

  set index(value: i32) {
    this.set("index", Value.fromI32(value));
  }

  get group(): string {
    let value = this.get("group");
    return value!.toString();
  }

  set group(value: string) {
    this.set("group", Value.fromString(value));
  }
}
