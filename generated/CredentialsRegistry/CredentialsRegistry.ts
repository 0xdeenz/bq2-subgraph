// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CredentialCreated extends ethereum.Event {
  get params(): CredentialCreated__Params {
    return new CredentialCreated__Params(this);
  }
}

export class CredentialCreated__Params {
  _event: CredentialCreated;

  constructor(event: CredentialCreated) {
    this._event = event;
  }

  get credentialId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get credentialType(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get merkleTreeDepth(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class GroupCreated extends ethereum.Event {
  get params(): GroupCreated__Params {
    return new GroupCreated__Params(this);
  }
}

export class GroupCreated__Params {
  _event: GroupCreated;

  constructor(event: GroupCreated) {
    this._event = event;
  }

  get groupId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get merkleTreeDepth(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get zeroValue(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class MemberAdded extends ethereum.Event {
  get params(): MemberAdded__Params {
    return new MemberAdded__Params(this);
  }
}

export class MemberAdded__Params {
  _event: MemberAdded;

  constructor(event: MemberAdded) {
    this._event = event;
  }

  get groupId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get index(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get identityCommitment(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get merkleTreeRoot(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class MemberRemoved extends ethereum.Event {
  get params(): MemberRemoved__Params {
    return new MemberRemoved__Params(this);
  }
}

export class MemberRemoved__Params {
  _event: MemberRemoved;

  constructor(event: MemberRemoved) {
    this._event = event;
  }

  get groupId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get index(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get identityCommitment(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get merkleTreeRoot(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class MemberUpdated extends ethereum.Event {
  get params(): MemberUpdated__Params {
    return new MemberUpdated__Params(this);
  }
}

export class MemberUpdated__Params {
  _event: MemberUpdated;

  constructor(event: MemberUpdated) {
    this._event = event;
  }

  get groupId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get index(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get identityCommitment(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get newIdentityCommitment(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get merkleTreeRoot(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class NewCredentialRating extends ethereum.Event {
  get params(): NewCredentialRating__Params {
    return new NewCredentialRating__Params(this);
  }
}

export class NewCredentialRating__Params {
  _event: NewCredentialRating;

  constructor(event: NewCredentialRating) {
    this._event = event;
  }

  get credentialId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get admin(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get rating(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get comment(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class CredentialsRegistry__credentialParametersResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getTreeDepth(): BigInt {
    return this.value0;
  }

  getCredentialType(): BigInt {
    return this.value1;
  }

  getMerkleTreeDuration(): BigInt {
    return this.value2;
  }
}

export class CredentialsRegistry__credentialRatingsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getTotalRating(): BigInt {
    return this.value0;
  }

  getNRatings(): BigInt {
    return this.value1;
  }
}

export class CredentialsRegistry__credentialStatesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }

  getGradeTreeIndex(): BigInt {
    return this.value0;
  }

  getCredentialsTreeIndex(): BigInt {
    return this.value1;
  }

  getNoCredentialsTreeIndex(): BigInt {
    return this.value2;
  }

  getGradeTreeRoot(): BigInt {
    return this.value3;
  }

  getCredentialsTreeRoot(): BigInt {
    return this.value4;
  }

  getNoCredentialsTreeRoot(): BigInt {
    return this.value5;
  }
}

export class CredentialsRegistry extends ethereum.SmartContract {
  static bind(address: Address): CredentialsRegistry {
    return new CredentialsRegistry("CredentialsRegistry", address);
  }

  credentialExists(credentialId: BigInt): boolean {
    let result = super.call(
      "credentialExists",
      "credentialExists(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(credentialId)]
    );

    return result[0].toBoolean();
  }

  try_credentialExists(credentialId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "credentialExists",
      "credentialExists(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(credentialId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  credentialIsValid(credentialId: BigInt): boolean {
    let result = super.call(
      "credentialIsValid",
      "credentialIsValid(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(credentialId)]
    );

    return result[0].toBoolean();
  }

  try_credentialIsValid(credentialId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "credentialIsValid",
      "credentialIsValid(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(credentialId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  credentialManagers(param0: BigInt): Address {
    let result = super.call(
      "credentialManagers",
      "credentialManagers(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_credentialManagers(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "credentialManagers",
      "credentialManagers(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  credentialParameters(
    param0: BigInt
  ): CredentialsRegistry__credentialParametersResult {
    let result = super.call(
      "credentialParameters",
      "credentialParameters(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new CredentialsRegistry__credentialParametersResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_credentialParameters(
    param0: BigInt
  ): ethereum.CallResult<CredentialsRegistry__credentialParametersResult> {
    let result = super.tryCall(
      "credentialParameters",
      "credentialParameters(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CredentialsRegistry__credentialParametersResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  credentialRatings(
    param0: BigInt
  ): CredentialsRegistry__credentialRatingsResult {
    let result = super.call(
      "credentialRatings",
      "credentialRatings(uint256):(uint128,uint128)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new CredentialsRegistry__credentialRatingsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_credentialRatings(
    param0: BigInt
  ): ethereum.CallResult<CredentialsRegistry__credentialRatingsResult> {
    let result = super.tryCall(
      "credentialRatings",
      "credentialRatings(uint256):(uint128,uint128)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CredentialsRegistry__credentialRatingsResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  credentialStates(
    param0: BigInt
  ): CredentialsRegistry__credentialStatesResult {
    let result = super.call(
      "credentialStates",
      "credentialStates(uint256):(uint80,uint80,uint80,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new CredentialsRegistry__credentialStatesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_credentialStates(
    param0: BigInt
  ): ethereum.CallResult<CredentialsRegistry__credentialStatesResult> {
    let result = super.tryCall(
      "credentialStates",
      "credentialStates(uint256):(uint80,uint80,uint80,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CredentialsRegistry__credentialStatesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  credentialURIs(param0: BigInt): string {
    let result = super.call(
      "credentialURIs",
      "credentialURIs(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toString();
  }

  try_credentialURIs(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall(
      "credentialURIs",
      "credentialURIs(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getCredentialAdmin(credentialId: BigInt): Address {
    let result = super.call(
      "getCredentialAdmin",
      "getCredentialAdmin(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(credentialId)]
    );

    return result[0].toAddress();
  }

  try_getCredentialAdmin(credentialId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getCredentialAdmin",
      "getCredentialAdmin(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(credentialId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCredentialAverageRating(credentialId: BigInt): BigInt {
    let result = super.call(
      "getCredentialAverageRating",
      "getCredentialAverageRating(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(credentialId)]
    );

    return result[0].toBigInt();
  }

  try_getCredentialAverageRating(
    credentialId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCredentialAverageRating",
      "getCredentialAverageRating(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(credentialId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCredentialData(credentialId: BigInt): Bytes {
    let result = super.call(
      "getCredentialData",
      "getCredentialData(uint256):(bytes)",
      [ethereum.Value.fromUnsignedBigInt(credentialId)]
    );

    return result[0].toBytes();
  }

  try_getCredentialData(credentialId: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getCredentialData",
      "getCredentialData(uint256):(bytes)",
      [ethereum.Value.fromUnsignedBigInt(credentialId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getCredentialManager(credentialId: BigInt): Address {
    let result = super.call(
      "getCredentialManager",
      "getCredentialManager(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(credentialId)]
    );

    return result[0].toAddress();
  }

  try_getCredentialManager(credentialId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getCredentialManager",
      "getCredentialManager(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(credentialId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCredentialType(credentialId: BigInt): BigInt {
    let result = super.call(
      "getCredentialType",
      "getCredentialType(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(credentialId)]
    );

    return result[0].toBigInt();
  }

  try_getCredentialType(credentialId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCredentialType",
      "getCredentialType(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(credentialId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCredentialURI(credentialId: BigInt): string {
    let result = super.call(
      "getCredentialURI",
      "getCredentialURI(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(credentialId)]
    );

    return result[0].toString();
  }

  try_getCredentialURI(credentialId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getCredentialURI",
      "getCredentialURI(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(credentialId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getMerkleRootCreationDate(credentialId: BigInt, merkleRoot: BigInt): BigInt {
    let result = super.call(
      "getMerkleRootCreationDate",
      "getMerkleRootCreationDate(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(credentialId),
        ethereum.Value.fromUnsignedBigInt(merkleRoot)
      ]
    );

    return result[0].toBigInt();
  }

  try_getMerkleRootCreationDate(
    credentialId: BigInt,
    merkleRoot: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMerkleRootCreationDate",
      "getMerkleRootCreationDate(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(credentialId),
        ethereum.Value.fromUnsignedBigInt(merkleRoot)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMerkleTreeDepth(groupId: BigInt): BigInt {
    let result = super.call(
      "getMerkleTreeDepth",
      "getMerkleTreeDepth(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(groupId)]
    );

    return result[0].toBigInt();
  }

  try_getMerkleTreeDepth(groupId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMerkleTreeDepth",
      "getMerkleTreeDepth(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(groupId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMerkleTreeRoot(groupId: BigInt): BigInt {
    let result = super.call(
      "getMerkleTreeRoot",
      "getMerkleTreeRoot(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(groupId)]
    );

    return result[0].toBigInt();
  }

  try_getMerkleTreeRoot(groupId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMerkleTreeRoot",
      "getMerkleTreeRoot(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(groupId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNumberOfMerkleTreeLeaves(groupId: BigInt): BigInt {
    let result = super.call(
      "getNumberOfMerkleTreeLeaves",
      "getNumberOfMerkleTreeLeaves(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(groupId)]
    );

    return result[0].toBigInt();
  }

  try_getNumberOfMerkleTreeLeaves(
    groupId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNumberOfMerkleTreeLeaves",
      "getNumberOfMerkleTreeLeaves(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(groupId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  gradeClaimVerifier(): Address {
    let result = super.call(
      "gradeClaimVerifier",
      "gradeClaimVerifier():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_gradeClaimVerifier(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "gradeClaimVerifier",
      "gradeClaimVerifier():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  semaphoreVerifier(): Address {
    let result = super.call(
      "semaphoreVerifier",
      "semaphoreVerifier():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_semaphoreVerifier(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "semaphoreVerifier",
      "semaphoreVerifier():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  wasNullifierHashUsed(credentialId: BigInt, nullifierHash: BigInt): boolean {
    let result = super.call(
      "wasNullifierHashUsed",
      "wasNullifierHashUsed(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(credentialId),
        ethereum.Value.fromUnsignedBigInt(nullifierHash)
      ]
    );

    return result[0].toBoolean();
  }

  try_wasNullifierHashUsed(
    credentialId: BigInt,
    nullifierHash: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "wasNullifierHashUsed",
      "wasNullifierHashUsed(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(credentialId),
        ethereum.Value.fromUnsignedBigInt(nullifierHash)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get semaphoreVerifierAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get gradeClaimVerifierAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateCredentialCall extends ethereum.Call {
  get inputs(): CreateCredentialCall__Inputs {
    return new CreateCredentialCall__Inputs(this);
  }

  get outputs(): CreateCredentialCall__Outputs {
    return new CreateCredentialCall__Outputs(this);
  }
}

export class CreateCredentialCall__Inputs {
  _call: CreateCredentialCall;

  constructor(call: CreateCredentialCall) {
    this._call = call;
  }

  get credentialId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get treeDepth(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get credentialType(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get merkleTreeDuration(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get credentialData(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get credentialURI(): string {
    return this._call.inputValues[5].value.toString();
  }
}

export class CreateCredentialCall__Outputs {
  _call: CreateCredentialCall;

  constructor(call: CreateCredentialCall) {
    this._call = call;
  }
}

export class DefineCredentialTypeCall extends ethereum.Call {
  get inputs(): DefineCredentialTypeCall__Inputs {
    return new DefineCredentialTypeCall__Inputs(this);
  }

  get outputs(): DefineCredentialTypeCall__Outputs {
    return new DefineCredentialTypeCall__Outputs(this);
  }
}

export class DefineCredentialTypeCall__Inputs {
  _call: DefineCredentialTypeCall;

  constructor(call: DefineCredentialTypeCall) {
    this._call = call;
  }

  get credentialType(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get credentialManager(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class DefineCredentialTypeCall__Outputs {
  _call: DefineCredentialTypeCall;

  constructor(call: DefineCredentialTypeCall) {
    this._call = call;
  }
}

export class InvalidateCredentialCall extends ethereum.Call {
  get inputs(): InvalidateCredentialCall__Inputs {
    return new InvalidateCredentialCall__Inputs(this);
  }

  get outputs(): InvalidateCredentialCall__Outputs {
    return new InvalidateCredentialCall__Outputs(this);
  }
}

export class InvalidateCredentialCall__Inputs {
  _call: InvalidateCredentialCall;

  constructor(call: InvalidateCredentialCall) {
    this._call = call;
  }

  get credentialId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class InvalidateCredentialCall__Outputs {
  _call: InvalidateCredentialCall;

  constructor(call: InvalidateCredentialCall) {
    this._call = call;
  }
}

export class RateCredentialCall extends ethereum.Call {
  get inputs(): RateCredentialCall__Inputs {
    return new RateCredentialCall__Inputs(this);
  }

  get outputs(): RateCredentialCall__Outputs {
    return new RateCredentialCall__Outputs(this);
  }
}

export class RateCredentialCall__Inputs {
  _call: RateCredentialCall;

  constructor(call: RateCredentialCall) {
    this._call = call;
  }

  get credentialId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get credentialsTreeRoot(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get nullifierHash(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get proof(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get rating(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get comment(): string {
    return this._call.inputValues[5].value.toString();
  }
}

export class RateCredentialCall__Outputs {
  _call: RateCredentialCall;

  constructor(call: RateCredentialCall) {
    this._call = call;
  }
}

export class UpdateCredentialCall extends ethereum.Call {
  get inputs(): UpdateCredentialCall__Inputs {
    return new UpdateCredentialCall__Inputs(this);
  }

  get outputs(): UpdateCredentialCall__Outputs {
    return new UpdateCredentialCall__Outputs(this);
  }
}

export class UpdateCredentialCall__Inputs {
  _call: UpdateCredentialCall;

  constructor(call: UpdateCredentialCall) {
    this._call = call;
  }

  get credentialId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get credentialUpdate(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpdateCredentialCall__Outputs {
  _call: UpdateCredentialCall;

  constructor(call: UpdateCredentialCall) {
    this._call = call;
  }
}

export class VerifyCredentialOwnershipProofCall extends ethereum.Call {
  get inputs(): VerifyCredentialOwnershipProofCall__Inputs {
    return new VerifyCredentialOwnershipProofCall__Inputs(this);
  }

  get outputs(): VerifyCredentialOwnershipProofCall__Outputs {
    return new VerifyCredentialOwnershipProofCall__Outputs(this);
  }
}

export class VerifyCredentialOwnershipProofCall__Inputs {
  _call: VerifyCredentialOwnershipProofCall;

  constructor(call: VerifyCredentialOwnershipProofCall) {
    this._call = call;
  }

  get credentialId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get merkleTreeRoot(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get nullifierHash(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get signal(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get externalNullifier(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get proof(): Array<BigInt> {
    return this._call.inputValues[5].value.toBigIntArray();
  }
}

export class VerifyCredentialOwnershipProofCall__Outputs {
  _call: VerifyCredentialOwnershipProofCall;

  constructor(call: VerifyCredentialOwnershipProofCall) {
    this._call = call;
  }
}

export class VerifyGradeClaimProofCall extends ethereum.Call {
  get inputs(): VerifyGradeClaimProofCall__Inputs {
    return new VerifyGradeClaimProofCall__Inputs(this);
  }

  get outputs(): VerifyGradeClaimProofCall__Outputs {
    return new VerifyGradeClaimProofCall__Outputs(this);
  }
}

export class VerifyGradeClaimProofCall__Inputs {
  _call: VerifyGradeClaimProofCall;

  constructor(call: VerifyGradeClaimProofCall) {
    this._call = call;
  }

  get credentialId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get gradeTreeRoot(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get nullifierHash(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get gradeThreshold(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get signal(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get externalNullifier(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get proof(): Array<BigInt> {
    return this._call.inputValues[6].value.toBigIntArray();
  }
}

export class VerifyGradeClaimProofCall__Outputs {
  _call: VerifyGradeClaimProofCall;

  constructor(call: VerifyGradeClaimProofCall) {
    this._call = call;
  }
}
